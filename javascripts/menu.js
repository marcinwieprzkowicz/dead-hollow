// Generated by CoffeeScript 1.4.0

/*

Menu CoffeeScript class.
Provides all services for menu.

@author: Marcin Wieprzkowicz (marcin.wieprzkowicz@gmail.com)
*/


(function() {
  var Menu,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Menu = (function(_super) {
    var dragdealerDefaults;

    __extends(Menu, _super);

    Menu.prototype.defaults = {
      menu: {
        element: '#menu',
        items: '#menu a'
      },
      section: {
        credits: '#credits',
        settings: '#settings',
        gameOver: '#game-over',
        aboutMe: '#about-me'
      },
      theEnd: {
        header: '#credits .heading h2',
        congratulations: '.congratulations'
      },
      backToMenu: '.backToMenu',
      retry: '.retryTrigger'
    };

    dragdealerDefaults = {
      slide: false,
      steps: 100,
      left: -10,
      right: -10,
      animationCallback: function(value) {
        var filled;
        filled = this.wrapper.querySelector('.filled');
        return filled.style.width = "" + (value * 100) + "%";
      }
    };

    function Menu(options) {
      Menu.__super__.constructor.apply(this, arguments);
      this.element = {
        main: {
          element: document.querySelector(this.options.menu.element),
          items: document.querySelectorAll(this.options.menu.items)
        },
        section: {
          credits: document.querySelector(this.options.section.credits),
          settings: document.querySelector(this.options.section.settings),
          gameOver: document.querySelector(this.options.section.gameOver),
          aboutMe: document.querySelector(this.options.section.aboutMe)
        },
        theEnd: {
          header: document.querySelector(this.options.theEnd.header),
          congratulations: document.querySelector(this.options.theEnd.congratulations)
        },
        backToMenu: document.querySelectorAll(this.options.backToMenu),
        retry: document.querySelector(this.options.retry)
      };
      window.test = this.game = new Game({}, this);
      this.setupEvents();
    }

    Menu.prototype.setupEvents = function() {
      var item, link, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      _ref = this.element.main.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        this.menuItem(item);
      }
      _ref1 = this.element.backToMenu;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        link = _ref1[_j];
        this.backToMenu(link);
      }
      this.addEvent(this.element.retry, 'click', function(event) {
        _this.stop(event);
        _this.fadeOut(_this.element.section.gameOver);
        return _this.game.start();
      });
    };

    Menu.prototype.menuItem = function(item) {
      var _this = this;
      this.addEvent(item, 'click', function(event) {
        var bindTo;
        bindTo = item.getAttribute('data-bind');
        if (_this[bindTo]) {
          return _this[bindTo].call(_this, event);
        }
      });
    };

    Menu.prototype.backToMenu = function(link) {
      var _this = this;
      this.addEvent(link, 'click', function(event) {
        var activeEl;
        _this.stop(event);
        activeEl = link.getAttribute('data-back');
        _this.fadeOut(_this.element.section[activeEl]);
        return _this.fadeIn(_this.element.main.element);
      });
    };

    Menu.prototype.startGame = function(event) {
      this.stop(event);
      this.game.start();
      this.fadeOut(this.element.main.element);
    };

    Menu.prototype.settings = function(event) {
      var musicVolumeOptions, soundsVolumeOptions,
        _this = this;
      this.stop(event);
      this.fadeOut(this.element.main.element);
      this.fadeIn(this.element.section.settings);
      this.flexcrollContent(this.element.section.settings);
      if (!this.musicVolume && !Modernizr.ismobile) {
        musicVolumeOptions = this.merge({}, dragdealerDefaults, {
          x: this.game.audio.background.getVolume() / 100,
          callback: function(value) {
            var volume;
            volume = Math.round(value * 100);
            return _this.game.audio.background.setVolume(volume);
          }
        });
        this.musicVolume = new Dragdealer('music-volume-slider', musicVolumeOptions);
      }
      if (!this.soundsVolume) {
        soundsVolumeOptions = this.merge({}, dragdealerDefaults, {
          x: this.game.audio.running.getVolume() / 100,
          callback: function(value) {
            var volume;
            volume = Math.round(value * 100);
            return _this.game.sounds.setVolume(volume);
          }
        });
        this.soundsVolume = new Dragdealer('sounds-volume-slider', soundsVolumeOptions);
      }
    };

    Menu.prototype.credits = function(event) {
      this.stop(event);
      this.setText(this.element.theEnd.header, 'Credits');
      this.element.theEnd.congratulations.style.display = 'none';
      this.fadeOut(this.element.main.element);
      this.fadeIn(this.element.section.credits);
      this.flexcrollContent(this.element.section.credits);
    };

    Menu.prototype.quit = function(event) {
      if (!confirm('Are you sure?')) {
        this.stop(event);
      }
    };

    return Menu;

  })(Base);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Menu = Menu;

}).call(this);
