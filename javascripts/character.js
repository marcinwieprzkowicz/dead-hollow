// Generated by CoffeeScript 1.4.0

/*

Character CoffeeScript class.
Creates a main character and controls all of his behavior.

@author: Marcin Wieprzkowicz (marcin.wieprzkowicz@gmail.com)
*/


(function() {
  var Character,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Character = (function(_super) {

    __extends(Character, _super);

    Character.prototype.defaults = {
      animation: {
        gravity: 2
      },
      jump: {
        height: 120,
        angle: Math.PI / 4
      }
    };

    function Character(options, audio) {
      this.audio = audio;
      this.setOptions(options);
      this.inAir = 0;
      this.createEl();
    }

    Character.prototype.setOptions = function(options) {
      Character.__super__.setOptions.apply(this, arguments);
      this.cssTransform = Modernizr.prefixed('transform');
      this.options.jump.sinusAngle = Math.round(Math.sin(this.options.jump.angle));
      return this.options.jump.force = Math.round(Math.sqrt(2 * this.options.jump.height * 2) / this.options.jump.sinusAngle);
    };

    Character.prototype.createEl = function() {
      var subEl;
      subEl = document.createElement('div');
      subEl.classList.add(this.options.klass);
      this.domEl = document.createElement('div');
      this.domEl.id = this.options.id;
      this.domEl.appendChild(subEl);
      return this;
    };

    Character.prototype.clear = function() {
      this.domEl.style[this.cssTransform] = 'translate3d(0, 0, 0)';
      this.domEl.classList.remove('death');
      this.domEl.classList.remove('paused');
      return this;
    };

    Character.prototype.move = function(inverted) {
      if (inverted == null) {
        inverted = false;
      }
      if (inverted) {
        this.domEl.classList.add('inverted');
      } else {
        this.domEl.classList.remove('inverted');
      }
      if (!this.inAir) {
        this.domEl.classList.add('run');
        if (this.audio.running.getVolume() > 0) {
          this.audio.running.play();
        }
      }
      return this;
    };

    Character.prototype.jump = function() {
      this.inAir = 1;
      this.domEl.classList.add('jump');
      if (this.audio.running.getVolume() > 0) {
        this.audio.running.stop();
      }
      return this;
    };

    Character.prototype.stop = function(animation, callback) {
      var _this = this;
      switch (animation) {
        case 'run':
          this.domEl.classList.remove('run');
          if (this.audio.running.getVolume() > 0) {
            this.audio.running.stop();
          }
          if (callback != null) {
            callback.call(this);
          }
          break;
        case 'jump':
          this.inAir = 0;
          this.domEl.classList.add('inAir');
          this.domEl.classList.remove('jump');
          this.domEl.classList.add('landing');
          if (this.audio.landing.getVolume() > 0) {
            this.audio.landing.play();
          }
          setTimeout(function() {
            _this.domEl.classList.remove('landing');
            _this.domEl.classList.remove('inAir');
            if (callback != null) {
              return callback.call(_this);
            }
          }, 200);
      }
      return this;
    };

    return Character;

  })(Base);

  (typeof exports !== "undefined" && exports !== null ? exports : this).Character = Character;

}).call(this);
