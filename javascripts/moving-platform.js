// Generated by CoffeeScript 1.4.0

/*

Moving Platform CoffeeScript class.
Creates special type of platforms - moving platforms (Wow! I know, impressive, isn't it? ;)). 

@author: Marcin Wieprzkowicz (marcin.wieprzkowicz@gmail.com)
*/


(function() {
  var MovingPlatform,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MovingPlatform = (function(_super) {

    __extends(MovingPlatform, _super);

    MovingPlatform.prototype.defaults = {
      movingPlatform: '.platform.moving',
      solid: '.platform.moving.solid',
      animation: {
        shift: 5
      }
    };

    function MovingPlatform(options) {
      var index, movingPlatformIterator, movingPlatformLength, platform;
      MovingPlatform.__super__.constructor.apply(this, arguments);
      this.element = {
        movingPlatform: document.querySelectorAll(this.options.movingPlatform),
        solid: document.querySelectorAll(this.options.solid)
      };
      movingPlatformLength = this.element.movingPlatform.length;
      movingPlatformIterator = 0;
      this.platform = new Array(movingPlatformLength);
      this.solid = new Array(movingPlatformLength);
      while (movingPlatformIterator < movingPlatformLength) {
        platform = this.element.movingPlatform[movingPlatformIterator];
        index = this.getIndex(platform);
        this.platform[index] = new Platform(platform);
        this.solid[movingPlatformIterator] = this.platform[index].solid;
        movingPlatformIterator++;
      }
    }

    MovingPlatform.prototype.draw = function() {
      var platform, _i, _len, _ref;
      _ref = this.platform;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        platform = _ref[_i];
        if (platform != null) {
          this.move(platform);
        }
      }
    };

    MovingPlatform.prototype.move = function(platform) {
      if (platform.direction === 'normal') {
        platform.offset += this.options.animation.shift;
        platform.solid.position.x += this.options.animation.shift;
      } else {
        platform.offset -= this.options.animation.shift;
        platform.solid.position.x -= this.options.animation.shift;
      }
      if (platform.offset === 0) {
        platform.direction = 'normal';
      } else if (platform.offset + platform.width >= platform.range) {
        platform.direction = 'alternate';
      }
      platform.element.style[this.globals.css.transform] = "translate3d(" + platform.offset + "px, 0, 0)";
    };

    return MovingPlatform;

  })(Base);

  (typeof exports !== "undefined" && exports !== null ? exports : this).MovingPlatform = MovingPlatform;

}).call(this);
