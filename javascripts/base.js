// Generated by CoffeeScript 1.4.0

/*

Base CoffeeScript class based on: https://gist.github.com/rpflorence/3681784.
The most important functionality is 'setOptions' - brings back good memories of MooTools :).
It also contains many useful functions.

@author: Marcin Wieprzkowicz (marcin.wieprzkowicz@gmail.com)
*/


(function() {
  var Base,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  Base = (function() {

    Base.prototype.defaults = {};

    function Base(options) {
      this.setOptions(options);
      this.cssTransform = Modernizr.prefixed('transform');
    }

    Base.prototype.setOptions = function(options) {
      this.options = this.merge({}, this.defaults, options);
      return this;
    };

    Base.prototype.addEvent = function(element, event, callback, useCapture) {
      if (useCapture == null) {
        useCapture = false;
      }
      element.addEventListener(event, callback, useCapture);
      return element;
    };

    Base.prototype.stop = function(event) {
      var e;
      e = event || window.event;
      e.preventDefault && e.preventDefault();
      e.stopPropagation && e.stopPropagation();
      e.cancelBubble = true;
      e.returnValue = false;
      return e;
    };

    Base.prototype.preventLongPressMenu = function(element) {
      element.ontouchstart = this.stop;
      element.ontouchmove = this.stop;
      element.ontouchend = this.stop;
      return element.ontouchcancel = this.stop;
    };

    Base.prototype.fadeIn = function(element) {
      element.classList.remove('hide');
      element.classList.add('show');
      element.style.opacity = 1;
      element.style.visibility = 'visible';
      return element;
    };

    Base.prototype.fadeOut = function(element) {
      element.classList.remove('show');
      element.classList.add('hide');
      element.style.opacity = 0;
      element.style.visibility = 'hidden';
      return element;
    };

    Base.prototype.setText = function(element, text) {
      if (element.innerText) {
        element.innerText = text;
      } else {
        element.textContent = text;
      }
      return element;
    };

    Base.prototype.getTransitionEndName = function() {
      var transitionEndEventNames;
      transitionEndEventNames = {
        'WebkitTransition': 'webkitTransitionEnd',
        'MozTransition': 'transitionend',
        'OTransition': 'oTransitionEnd',
        'msTransition': 'MSTransitionEnd',
        'transition': 'transitionend'
      };
      return transitionEndEventNames[Modernizr.prefixed('transition')];
    };

    Base.prototype.flexcrollContent = function(element) {
      fleXenv.fleXcrollMain(element.querySelector('.flexcroll'));
      return element;
    };

    Base.prototype.merge = function() {
      var extension, extensions, property, target, _i, _len;
      target = arguments[0], extensions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = extensions.length; _i < _len; _i++) {
        extension = extensions[_i];
        for (property in extension) {
          if (!__hasProp.call(extension, property)) continue;
          target[property] = extension[property];
        }
      }
      return target;
    };

    return Base;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).Base = Base;

}).call(this);
